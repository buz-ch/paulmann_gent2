blueprint:
  name: Paulmann Gent 2 RGB Remote
  description: >
    <h1>Paulmann Gent 2 RGB Remote Home Assistant Blueprint</h1>

    <p>This Home Assistant blueprint provides control of lights using a Paulmann Gent 2 RGB remote (and likely compatible Sunricher ZG2868 models) via Zigbee2MQTT.</p>

    <h2>Description</h2>

    <p>This blueprint leverages Zigbee2MQTT to receive commands from the Paulmann Gent 2 RGB remote and translate them into actions to control your lights in Home Assistant. It aims to support most of the remote's functionalities, offering a convenient way to interact with your smart lighting.</p>

    <p>The blueprint is designed primarily for RGB color lights but can be used with other types of lights, although some features may not be relevant or function as expected with non-RGB lighting.</p>

    <p><b>Important Considerations:</b></p>

    <ul>
      <li><b>Zigbee2MQTT Requirement:</b> This blueprint requires you to be using Zigbee2MQTT to manage your Zigbee devices.</li>
      <li><b>Remote Compatibility:</b> While designed for the Paulmann Gent 2 RGB remote (see <a href="https://en.paulmann.com/detail/d6cceca46d334842bd3bd2008204274c">Paulmann Gent 2 RGB Remote</a>), it is believed to also be compatible with the Sunricher ZG2868 (see <a href="https://www.zigbee2mqtt.io/devices/501.40.html">Zigbee2MQTT Device Page</a>). Ensure your remote is correctly paired with Zigbee2MQTT.</li>
      <li><b>Topic Configuration:</b> You will need to configure the correct MQTT topic for your remote in the blueprint inputs.</li>
    </ul>

    <h2>Features</h2>

    <p>This blueprint supports the following features of the Paulmann Gent 2 RGB remote:</p>

    <ul>
      <li><b>Power button</b>: Three variants possible
        <ul>
          <li>Toggle: simply calls lights.toggle</li>
          <li>On/off: in case at least one lights of the group is on, tutrn them all off. Otherwise turn them all on.</li>
          <li>Adaptive: Like above, but turn on will select brightness and color temperature depending on the time of the day.</li>
        </ul>
        </li>
      <li><b>Brightness Adjustment:</b> Increases and decreases brightness in steps using dedicated brightness up/down buttons.</li>
      <li><b>Color Temperature Control:</b> Sets predefined color temperatures (Warm White, Neutral White, Cold White) using the dedicated color temperature buttons (Fire, Play, Snowflake icons).</li>
      <li><b>Color Selection from Color Wheel:</b> Allows you to select colors using the remote's color wheel, controlling the hue and saturation of your lights.</li>
      <li><b>Scene Recall:</b> Supports recalling up to 7 pre-configured lighting scenes with custom colors and brightness levels, accessible via the 7 scene buttons on the remote.</li>
      <li><b>Transition Time:</b> Allows you to configure a transition time for smooth changes in brightness, color, and color temperature.</li>
      <li><b>Control of Multiple Light Groups:</b> Provides configuration for controlling up to four different groups of lights, each assigned to a dedicated button on the remote.</li>
    </ul>
  domain: automation
  input:
    mqtt_topic:
      name: MQTT Topic
      description: The MQTT topic for the remote (usually zigbee2mqtt/{FRIENDLY_NAME})
      default: "zigbee2mqtt/"
      selector:
        text:

    target_lights_1:
      name: Lights on button 1
      description: The lights that button 1 will control.
      default: []
      selector:
        target:
          entity:
            domain: light
    target_lights_2:
      name: Lights on button 2
      description: The lights that button 2 will control.
      default: []
      selector:
        target:
          entity:
            - domain: light
    target_lights_3:
      name: Lights on button 3
      description: The lights that button 3 will control.
      default: []
      selector:
        target:
          entity:
            - domain: light
    target_lights_4:
      name: Lights on button 4
      description: The lights that button 4 will control.
      default: []
      selector:
        target:
          entity:
            - domain: light

    transition_time:
      name: Transition time
      description: How long the transition from one state to the next should take in seconds
      default: 5
      selector:
        number:
          min: 0
          max: 1800

    color_temperature_warm_white:
      name: Color Temperature for Warm white
      description: Which color temp to use for the 'fire' button (Kelvin). General purpose RGB bulbs generally top out at 6500K or so.
      default: 2700
      selector:
        number:
          min: 2000
          max: 9000
    color_temperature_neutral_white:
      name: Color Temperature for Neutral white
      description: Which color temp to use for the 'play' button (Kelvin). General purpose RGB bulbs generally top out at 6500 or so.
      default: 4000
      selector:
        number:
          min: 2000
          max: 9000
    color_temperature_cold_white:
      name: Color Temperature for Cold white
      description: Which color temp to use for the 'snowflake' button (Kelvin). General purpose RGB bulbs generally top out at 6500 or so.
      default: 6000
      selector:
        number:
          min: 2000
          max: 9000

    # --- Adaptive Lighting Settings ---
    adaptive_lighting_settings:
      name: Behavior of power button
      icon: mdi:sun-thermometer-outline
      collapsed: true
      input:
        light_control_logic:
          name:  Power button behavior
          description: How should the lights react upon press of power button
          default: toggle 
          selector:
            select:
              options:
                - label: Toggle the lights to their respective other state
                  value: toggle
                - label: On/off logic (switch off if at least one of the lights in the group is on)
                  value: onoff_logic
                - label: Adaptive (use time sensitive brightness and color temperature, use the following fields to set time periods and associated parameters)
                  value: adaptive 
              mode: dropdown


        morning_start_time:
          name: Morning Start Time
          description: Time when morning lighting should begin and night lighting ends. Only used with adaptive.
          default: "06:00:00"
          selector:
            time: {}

        morning_color_temp:
          name: Morning Color Temperature (Kelvin)
          description: Warmer, sunrise-like color temperature for mornings (e.g., 2700K - 3500K). Only used with adaptive.
          default: 3000
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100

        morning_brightness:
          name: Morning Brightness (Percentage)
          description: Brightness percentage for mornings. Only used with adaptive.
          default: 40
          selector:
            number:
              mode: slider
              min: 0
              max: 100
              unit_of_measurement: "%"
              step: 1

        day_start_time:
          name: Day Start Time
          description: Time when day lighting should begin and morning lighting ends. Only used with adaptive.
          default: "09:00:00"
          selector:
            time: {}

        day_color_temp:
          name: Day Color Temperature (Kelvin)
          description: Brighter, cooler color temperature for daytime (e.g., 4000K - 5000K). Only used with adaptive.
          default: 4500
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100

        day_brightness:
          name: Day Brightness (Percentage)
          description: Brightness percentage for daytime. Only used with adaptive.
          default: 100
          selector:
            number:
              mode: slider
              min: 0
              max: 100
              unit_of_measurement: "%"
              step: 1

        evening_start_time:
          name: Evening Start Time
          description: Time when evening lighting should begin and day lighting ends. Only used with adaptive.
          default: "17:00:00"
          selector:
            time: {}

        evening_color_temp:
          name: Evening Color Temperature (Kelvin)
          description: Warmer, sunset-like color temperature for evenings (e.g., 2500K - 3000K). Only used with adaptive.
          default: 2700
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100

        evening_brightness:
          name: Evening Brightness (Percentage)
          description: Brightness percentage for evenings. Only used with adaptive.
          default: 60
          selector:
            number:
              mode: slider
              min: 0
              max: 100
              unit_of_measurement: "%"
              step: 1

        night_start_time:
          name: Night Start Time
          description: Time when night lighting should begin and evening lighting ends (can be past midnight). Only used with adaptive.
          default: "22:00:00"
          selector:
            time: {}

        night_color_temp:
          name: Night Color Temperature (Kelvin)
          description: Very warm, dimmest color temperature for nighttime (e.g., 2200K - 2700K). Only used with adaptive.
          default: 2500
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100

        night_brightness:
          name: Night Brightness (Percentage)
          description: Brightness percentage for nighttime. Only used with adaptive.
          default: 40 
          selector:
            number:
              mode: slider
              min: 0
              max: 100
              unit_of_measurement: "%"
              step: 1

    scene_setups:
      name: Scene setups
      icon: mdi:palette
      collapsed: true
      input:
        scene_1_color:
          name: Color of scene 1
          description: Which color for scene 1
          default: [255, 255, 255]
          selector:
            color_rgb:
        scene_1_brightness:
          name: Brightness of scene 1
          description: Which brightness for scene 1
          default: 80
          selector:
            number:
              min: 1
              max: 100

        scene_2_color:
          name: Color of scene 2
          description: Which color for scene 2
          default: [255, 255, 255]
          selector:
            color_rgb:
        scene_2_brightness:
          name: Brightness of scene 2
          description: Which brightness for scene 2
          default: 80
          selector:
            number:
              min: 1
              max: 100

        scene_3_color:
          name: Color of scene 3
          description: Which color for scene 3
          default: [255, 255, 255]
          selector:
            color_rgb:
        scene_3_brightness:
          name: Brightness of scene 3
          description: Which brightness for scene 3
          default: 80
          selector:
            number:
              min: 1
              max: 100

        scene_4_color:
          name: Color of scene 4
          description: Which color for scene 4
          default: [255, 255, 255]
          selector:
            color_rgb:
        scene_4_brightness:
          name: Brightness of scene 4
          description: Which brightness for scene 4
          default: 80
          selector:
            number:
              min: 1
              max: 100

        scene_5_color:
          name: Color of scene 5
          description: Which color for scene 5
          default: [255, 255, 255]
          selector:
            color_rgb:
        scene_5_brightness:
          name: Brightness of scene 5
          description: Which brightness for scene 5
          default: 80
          selector:
            number:
              min: 1
              max: 100

        scene_6_color:
          name: Color of scene 6
          description: Which color for scene 6
          default: [255, 255, 255]
          selector:
            color_rgb:
        scene_6_brightness:
          name: Brightness of scene 6
          description: Which brightness for scene 6
          default: 80
          selector:
            number:
              min: 1
              max: 100

        scene_7_color:
          name: Color of scene 7
          description: Which color for scene 7
          default: [255, 255, 255]
          selector:
            color_rgb:
        scene_7_brightness:
          name: Brightness of scene 7
          description: Which brightness for scene 7
          default: 80
          selector:
            number:
              min: 1
              max: 100

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

action:
  - variables:
      command_name: "{{ trigger.payload_json.action[:-2] }}" #last two characters are _BUTTONNUMBER
      target_light_array:
        - !input target_lights_1
        - !input target_lights_2
        - !input target_lights_3
        - !input target_lights_4
      scene_color_array:
        - !input scene_1_color
        - !input scene_2_color
        - !input scene_3_color
        - !input scene_4_color
        - !input scene_5_color
        - !input scene_6_color
        - !input scene_7_color
      scene_brightness_array:
        - !input scene_1_brightness
        - !input scene_2_brightness
        - !input scene_3_brightness
        - !input scene_4_brightness
        - !input scene_5_brightness
        - !input scene_6_brightness
        - !input scene_7_brightness
      selected_target_light_id: "{{ trigger.payload_json.action[-1]}}" #last char is LIGHTNUMBER
      selected_target_lights: "{{target_light_array[selected_target_light_id-1]}}"

      #transition_time_var: !input transition_time
      #brightness_transition_time_var: !input brightness_transition_time
      current_time: "{{ now().strftime('%H:%M:%S') }}"
      day_start: !input day_start_time
      evening_start: !input evening_start_time
      night_start: !input night_start_time
      morning_start: !input morning_start_time

      var_morning_color_temp: !input morning_color_temp
      var_day_color_temp: !input day_color_temp
      var_evening_color_temp: !input evening_color_temp
      var_night_color_temp: !input night_color_temp
      var_morning_brightness: !input morning_brightness
      var_day_brightness: !input day_brightness
      var_evening_brightness: !input evening_brightness
      var_night_brightness: !input night_brightness
      var_light_control_logic: !input light_control_logic




      entities: >
        {%- set ns = namespace(ret=[]) %}
        {%- for key in ['device_id', 'area_id', 'entity_id'] %}
          {%- set items = selected_target_lights.get(key, [])  %}
          {%- if items %}
            {%- set items = [ items ] if items is string else items %}
            {%- set filt = key.split('_') | first %}
            {%- set items = items if filt == 'entity' else items | map(filt ~ '_entities') | sum(start=[]) %}
            {%- set ns.ret = ns.ret + [ items ] %}
          {%- endif %}
        {%- endfor %}
        {{ ns.ret | sum(start=[]) }}
      filtered: "{{ entities | select( 'search' , '^light' ) | select('is_state', 'on') | list }}"
      lights_on: "{{ filtered | count > 0 }}"

      adaptive_color_temp: >
        {% if current_time >= morning_start and current_time < day_start %}
          {{ var_morning_color_temp }}
        {% elif current_time >= day_start and current_time < evening_start %}
          {{ var_day_color_temp }}
        {% elif current_time >= evening_start and current_time < night_start %}
          {{ var_evening_color_temp }}
        {% else %} {# Night or time past midnight #}
          {{ var_night_color_temp }}
        {% endif %}

      adaptive_brightness_pct: >
        {% if current_time >= morning_start and current_time < day_start %}
          {{ var_morning_brightness }}
        {% elif current_time >= day_start and current_time < evening_start %}
          {{ var_day_brightness }}
        {% elif current_time >= evening_start and current_time < night_start %}
          {{ var_evening_brightness }}
        {% else %} {# Night or time past midnight #}
          {{ var_night_brightness }}
        {% endif %}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (command_name == 'on' or  command_name == 'off') and var_light_control_logic == 'toggle'}}"
        sequence:
          - action: light.toggle
            target: "{{selected_target_lights}}"
      - conditions:
          - condition: template
            value_template: "{{ (command_name == 'on' or  command_name == 'off') and lights_on }}"
        sequence:
          - action: light.turn_off
            target: "{{selected_target_lights}}"
      - conditions:
          - condition: template
            value_template: "{{ (command_name == 'on' or  command_name == 'off') and var_light_control_logic == 'onoff_logic' and not lights_on }}"
        sequence:
          - action: light.turn_on
            target: "{{selected_target_lights}}"
      - conditions:
          - condition: template
            value_template: "{{ (command_name == 'on' or  command_name == 'off') and var_light_control_logic == 'adaptive' and not lights_on }}"
        sequence:
          - action: light.turn_on
            target: "{{selected_target_lights}}"
            data:
              #transition: "{{ transition_time_var }}"
              color_temp_kelvin: "{{ adaptive_color_temp }}"
              brightness_pct: "{{ adaptive_brightness_pct }}"


      - conditions:
          - condition: template
            value_template: "{{ command_name == 'brightness_step_down' }}"
        sequence:
          - action: light.turn_on
            target: "{{selected_target_lights}}"
            data:
              brightness_step_pct: -10
              transition: !input transition_time

      - conditions:
          - condition: template
            value_template: "{{ command_name == 'brightness_step_up' }}"
        sequence:
          - action: light.turn_on
            target: "{{selected_target_lights}}"
            data:
              brightness_step_pct: 10
              transition: !input transition_time

      - conditions:
          - condition: template
            value_template: "{{ command_name == 'color_temperature_step_down' }}"
        sequence:
          - action: light.turn_on
            target: "{{selected_target_lights}}"
            data:
              color_temp_kelvin: !input color_temperature_cold_white
              transition: !input transition_time

      - conditions:
          - condition: template
            value_template: "{{ command_name == 'color_temperature_step_up' }}"
        sequence:
          - action: light.turn_on
            target: "{{selected_target_lights}}"
            data:
              color_temp_kelvin: !input color_temperature_warm_white
              transition: !input transition_time

      - conditions:
          - condition: template
            value_template: "{{ command_name == 'color_temperature_move' }}"
        sequence:
          - action: light.turn_on
            target: "{{selected_target_lights}}"
            data:
              color_temp_kelvin: !input color_temperature_neutral_white
              transition: !input transition_time

      - conditions:
          - condition: template
            value_template: "{{ command_name == 'hue_move' }}"
        sequence:
          - action: mqtt.publish
            metadata: {}
            data:
              topic: test
              payload: "{{NOW}} command_name {{command_name}}, selected_target_light: {{selected_target_light_id}}  target_lights:  {{selected_target_lights}}"
          # - action: light.turn_on
          #   metadata: {}
          #   target: "{{selected_target_lights}}"
          #   data:
          #     hs_color:
          #       - "{{trigger.payload_json.action_hue/255*360*1.0}}" #we get a number between 0 and 255 and need one between 0 and 360, enforcing a float
          #       - 99.0

      - conditions:
          - condition: template
            value_template: "{{ command_name == 'move_to_hue_and_saturation' }}"
        sequence:
          - action: light.turn_on
            metadata: {}
            target: "{{selected_target_lights}}"
            data:
              hs_color:
                - "{{trigger.payload_json.action_hue/255*360*1.0}}" #we get a number between 0 and 255 and need one between 0 and 360, enforcing a float
                - "{{trigger.payload_json.action_saturation/255*100*1.0}}" #we get a number between 0 and 255 and need one between 0 and 360, enforcing a float [it seems superflous as it seems to always be 254]
              transition: !input transition_time

      - conditions:
          - condition: template
            value_template: "{{ command_name[:6] == 'recall' }}"
        sequence:
          - variables:
              scene_number: "{{command_name[7:8]|int-1}}"
          - action: light.turn_on
            metadata: {}
            target: "{{selected_target_lights}}"
            data:
              rgb_color: "{{scene_color_array[scene_number]}}"
              brightness: "{{scene_brightness_array[scene_number]}}"
              transition: !input transition_time

    default:
      #This is really just debug code
      - sequence:
          - action: mqtt.publish
            metadata: {}
            data:
              topic: test
              payload: "DEFAULT {{now()}} command_name {{command_name}}, selected_target_light: {{selected_target_light_id}}  selected_target_lights  {{selected_target_lights}}"

mode: parallel
